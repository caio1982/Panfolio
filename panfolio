#!/usr/bin/env python
# -*- coding: utf-8 -*-

__license__   = 'All original files are public domain'
__author__    = 'Caio Begotti'
__email__     = 'caio1982@gmail.com'
__credits__   = ['']

"""
Panfolio is a tiny Python script to generate a nice
simple gallery of all your vacations photos
"""

import os
import sys
import mimetypes
import argparse
import glob
import shutil

from PIL import Image as image
from PIL import ExifTags as exif

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dir', help='your photos directory')
parser.add_argument('-n', '--name', help='the name of your gallery')
parser.add_argument('-u', '--url', help='url to be appended to your gallery')
parser.add_argument('-f', '--fullscreen', help='makes a full screen pictures-only gallery', action='store_true')
parser.add_argument('-s', '--sharing', help='enables social sharing features', action='store_true')
args = parser.parse_args()

# http://www.endlesslycurious.com/2011/05/11/extracting-image-exif-data-with-python/
def get_exif_data(image):
    ret = {}
    try:
        if hasattr(image, '_getexif' ):
            exifinfo = image._getexif()
            if exifinfo != None:
                for tag, value in exifinfo.items():
                    decoded = exif.TAGS.get(tag, tag)
                    ret[decoded] = value
    except IOError:
        print 'IOERROR ' + image
    return ret

def main():
    resources = ['default.css', 'jquery.masonry.min.js']
    size = 256, 256
    allimages = args.dir + '/*'
    outpath = args.dir + '.panfolio'
    if not os.path.exists(outpath):
        os.makedirs(outpath)
    else:
        print 'Thumbnails directory %s not empty, creation skipped' % outpath

    if args.name is None:
        print 'Empty gallery name, assigning default'
        html_name = 'Localhost'
    else:
        html_name = args.name

    if args.url is None:
        print 'Empty gallery URL address, assigning default'
        html_url = 'http://127.0.0.1'
    else:
        html_url = args.url
    
    html_header = """
<head>
	<title>%s</title>

	<!-- gotta document which version of masonry works best -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
	<script src=".panfolio/jquery.masonry.min.js" type="text/javascript"></script>

	<!-- default styling theme -->
	<link href=".panfolio/default.css" rel="stylesheet" type="text/css" />
</head>
                  """ % (html_name)

    html_content = """
<div id="content">
	<h1>&#9618; %s</h1>
	<p><a href="%s">%s</a></p>
                   """ % (html_name, html_url, html_url)
    html_sharing = """
	<div class="addthis_toolbox addthis_default_style addthis_32x32_style">
		<!-- which ones make in via command line flags, maybe? -->
		<a class="addthis_button_twitter"></a>
		<a class="addthis_button_facebook"></a>
		<a class="addthis_button_google_plusone_share"></a>
		<a class="addthis_button_tumblr"></a>
		<a class="addthis_button_instapaper"></a>
		<a class="addthis_button_email"></a>
	</div>
	<!-- delayed loading as it's not critical -->
	<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js"></script>
                   """
    html_footer = """
<script>
$( function() {
  var $container = $('#gallery');
  $container.imagesLoaded( function() {
    $container.masonry({
      columnWidth: function( containerWidth ) {
        return containerWidth / 5
      }
    });
  });	 
});
</script>
                  """

    html = []
    html.append("<html>")
    html.append(html_header)
    html.append("<body>")
    html.append("<div id='gallery'>")
    
    for filepath in glob.glob(allimages):
        type = mimetypes.guess_type(filepath)[0]
        filename = os.path.split(filepath)[1]
        thumbnail = '.panfolio/%s.jpg' % os.path.splitext(filename)[0]
        if type and 'image' in type:
            # FIXME: not the prettiest try/except around...
            #        is it too bad to have nested try/except?
            try:
                i = image.open(filepath)
                try:
                    exifdata = get_exif_data(i)
                    if exifdata['Orientation'] == 3:
                        i = i.transpose(image.ROTATE_180)
                    elif exifdata['Orientation'] == 6:
                        i = i.transpose(image.ROTATE_270)
                    elif exifdata['Orientation'] == 8:
                        i = i.transpose(image.ROTATE_90)
                except KeyError:
                    print 'No orientation found in EXIF tags of %s' % filepath
                i.thumbnail(size, image.ANTIALIAS)
                i.save(args.dir + thumbnail, 'JPEG', quality=100, progressive=True)
            except IOError:
                print 'Thumbnailing failed for %s' % filepath
            item = "\t<div class='item'><a href='%s'><img class='thumbnail' src='%s' /></a></div>" % (filename, thumbnail)
            html.append(item)
        else:
            print "Skipping file %s (it's not an image)" % filepath
    html.append('</div>')
   
    if not args.fullscreen:
        html.append(html_content)
        if args.sharing:
            html.append(html_sharing)
        html.append('</div>')
    else:
        print 'Fullscreen option has precedence over sharing features and others'

    html.append(html_footer)
    html.append('</body>')
    html.append('</html>')

    for res in resources:
        shutil.copy('resources/' + res, outpath)

    with open (args.dir + 'index.html', 'w') as f:
        f.write('\n'.join(html))

    print '\nAll done! You can now copy your directory %s and gallery files to anywhere you want.\t' % args.dir

if __name__ == '__main__':
    if not args.dir:
        parser.print_help()
        sys.exit(2)
    main()
    sys.exit(0)
