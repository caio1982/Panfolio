#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division

__license__   = 'All original files are public domain'
__email__     = 'caio1982@gmail.com'
__author__    = 'Caio Begotti'

"""
Panfolio is a tiny Python script to generate a nice
simple gallery of all your vacations photos
"""

import os
import sys
import mimetypes
import argparse
import glob
import shutil

from PIL import Image as image
from PIL import ExifTags as exif

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dir', help='your photos directory')
parser.add_argument('-n', '--name', help='the name of your gallery')
parser.add_argument('-u', '--url', help='url to be appended to your gallery')
parser.add_argument('-b', '--blurry', help='mark images whose blurry factor is above N', metavar='N')
parser.add_argument('-f', '--fullscreen', help='makes a full screen pictures-only gallery', action='store_true')
parser.add_argument('-s', '--sharing', help='enables social sharing features', action='store_true')
args = parser.parse_args()

DEFAULT_URL = 'http://...'
DEFAULT_NAME = 'Demo'

# http://www.endlesslycurious.com/2011/05/11/extracting-image-exif-data-with-python/
def get_exif_data(image):
    ret = {}
    try:
        if hasattr(image, '_getexif' ):
            exifinfo = image._getexif()
            if exifinfo != None:
                for tag, value in exifinfo.items():
                    decoded = exif.TAGS.get(tag, tag)
                    ret[decoded] = value
    except IOError:
        print 'IOERROR ' + image
    return ret

def blur_factor(image):
    exifdata = get_exif_data(image)
    fl = exifdata['FocalLength']
    et = exifdata['ExposureTime']
    return ( et[0] / et[1] ) / ( 1 / ( fl[0] / fl[1] ) )

def main():
    resources = ['normalize.css',
                 'debug.css',
                 'default.css',
                 'mosaic.css',
                 'jquery-2.0.3.min.js',
                 'lightbox/orangebox/css/orangebox.css',
                 'lightbox/orangebox/js/orangebox.min.js',
                 'fontawesome/fontawesome.css',
                 'fontawesome/fontawesome-webfont.woff',
                 'fontawesome/fontawesome-webfont.ttf']
    thumbnail_size = 256, 256
    preview_size = 512, 512
    args.dir = args.dir + '/'
    allimages = args.dir + '/*'
    outpath = args.dir + '.panfolio'
    if not os.path.exists(outpath):
        os.makedirs(outpath)
    else:
        print 'Thumbnails directory %s not empty, overwriting content' % outpath

    if args.name is None:
        print 'Empty gallery name, assigning default: %s' % DEFAULT_NAME
        html_name = DEFAULT_NAME
    else:
        html_name = args.name

    if args.url is None:
        print 'Empty gallery URL address, assigning default: %s' % DEFAULT_URL
        html_url = DEFAULT_URL
    else:
        html_url = args.url
   
    html_addthis_per_photo = 'false'
    if args.sharing:
        html_addthis_per_photo = 'true' 
    
    html_header = """
<head>
	<meta charset="utf-8">
	<title>%s</title>
	
	<link href=".panfolio/default.css" rel="stylesheet" type="text/css" /> <!-- default styling theme -->
	<link href=".panfolio/mosaic.css" rel="stylesheet" type="text/css" /> <!-- to tightly align all the pictures -->
	<link href=".panfolio/fontawesome.css" rel="stylesheet" type="text/css" /> <!-- cool icons -->
	<script type="application/javascript" src=".panfolio/jquery-2.0.3.min.js"></script>
	<script type="application/javascript" src=".panfolio/orangebox.min.js"></script>
	<link href=".panfolio/orangebox.css" rel="stylesheet" type="text/css" /> <!-- for when a picture is selected -->
</head>
                  """ % (html_name)

    html_content = """
<div id="content">
	<h1><i class="icon icon-th icon-5x"></i> %s</h1>
	<p>
		<a class="links" href="%s">%s</a>
	</p>
                   """ % (html_name,
                          html_url,
                          html_url)
    html_sharing = """
                   """
    html_footer = """
<script type="application/javascript">
oB.settings.contentBorderWidth = 0;
oB.settings.showNav = True;
oB.settings.showClose = False;
</script>
                  """ #% html_addthis_per_photo

    html_per_photo_sharing = """
                             """

    html = []
    html.append("<!DOCTYPE html>")
    html.append("<html>")
    html.append(html_header)
    html.append("<body>")
    html.append("<section id='gallery'>")
    html.append("<ul id='thumbnails'>")

    currentimage = 1
    previousimage = currentimage - 1
    nextimage = currentimage + 1

    for filepath in glob.glob(allimages):
        type = mimetypes.guess_type(filepath)[0]
        filename = os.path.split(filepath)[1]
        thumbnail = '.panfolio/thumbnail_%s.png' % os.path.splitext(filename)[0]
        preview = '.panfolio/preview_%s.png' % os.path.splitext(filename)[0]
        if type and 'image' in type:
            try:
                i = image.open(filepath)
                try:
                    exifdata = get_exif_data(i)
                    if exifdata['Orientation'] == 3:
                        i = i.transpose(image.ROTATE_180)
                    elif exifdata['Orientation'] == 6:
                        i = i.transpose(image.ROTATE_270)
                    elif exifdata['Orientation'] == 8:
                        i = i.transpose(image.ROTATE_90)
                except KeyError:
                    print 'No EXIF orientation found in %s' % filepath

                # this is not pretty but as long no major browsers support
                # image-orientation through css i don't know how to fix that
                # without using javascript, and i'd rather have the gallery
                # looking good than saving a few kilobytes of extra images
                i.thumbnail(preview_size, image.ANTIALIAS)
                i.save(args.dir + preview, 'PNG', quality=100)

                i.thumbnail(thumbnail_size, image.ANTIALIAS)
                i.save(args.dir + thumbnail, 'PNG', quality=100)
            except IOError:
                print 'Thumbnailing failed for %s' % filepath

            item = ""
            if args.blurry:
                n = blur_factor(i)
                if float(n) > float(args.blurry):
                    print 'Image %s seems blurry (factor %s)' % (filepath, n)
                    item = "\t<img class='thumbnail blurry' src='%s' />" % (thumbnail)
            else:
                item = """
	<li>
		<div>
			<a data-ob='lightbox[panfolio]' href='%s'>
				<img class='thumbnail' src='%s' alt='preview' />
			</a>
		</div>
	</li>
                       """ % (filename, thumbnail)
            html.append(item)
            currentimage += 1
            nextimage = currentimage + 1
            previousimage = currentimage - 1
        else:
            print "Skipping non-image file %s" % filepath
    html.append('</ul>')
    html.append('</section>')
   
    if not args.fullscreen:
        html.append(html_content)
        if args.sharing:
            html.append(html_sharing)
        html.append('</div>')
    else:
        print 'Fullscreen option has precedence over sharing features and others'

    html.append(html_footer)
    html.append('</body>')
    html.append('</html>')

    for item in resources:
        shutil.copy('resources/' + item, outpath)

    with open (args.dir + 'index.html', 'w') as f:
        f.write('\n'.join(html))

    print '\nAll done! You can now copy your directory %s and gallery files to anywhere you want.\t' % args.dir

if __name__ == '__main__':
    if not args.dir:
        parser.print_help()
        sys.exit(2)
    main()
    sys.exit(0)
