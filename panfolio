#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division

__license__   = 'All original files are public domain'
__email__     = 'caio1982@gmail.com'
__author__    = 'Caio Begotti'

'''
Panfolio is a tiny Python script to generate a nice and
simple, yet beautiful, gallery of all your pictures.
'''

import os
import argparse

from sys import exit
from glob import glob
from shutil import copy
from urllib import quote
from mimetypes import guess_type

from PIL import Image as image
from PIL import ImageDraw as draw
from PIL import ExifTags as exif

HTML_URL = 'http://127.0.0.1'
HTML_NAME = 'Panfolio demo'

RESOURCES = ['default.css',
             'mosaic.css',
             'lightbox.css',
             'fontawesome/fontawesome.css',
             'fontawesome/fontawesome-webfont.woff',
             'fontawesome/fontawesome-webfont.eot',
             'fontawesome/fontawesome-webfont.ttf']

HTML_HEADER = '''
<!doctype html>

<html>
<head>
	<meta charset='utf-8'>
	<title>%s</title>
	
	<link href='.panfolio/default.css' rel='stylesheet' type='text/css' />
	<link href='.panfolio/mosaic.css' rel='stylesheet' type='text/css' />
	<link href='.panfolio/lightbox.css' rel='stylesheet' type='text/css' />
	<link href='.panfolio/fontawesome.css' rel='stylesheet' type='text/css' />
</head>
'''

HTML_ITEM = '''
	<li>
		<a href='#image-%d'><img src='%s' alt='thumbnail' /></a>
		<div class='overlay' id='image-%d'>
			%s <!-- optional caption block -->
			<a href='%s'><div class='frame' style='background-image: url(%s);'></div></a>
			<div id='navigation'>
				<a href='#image-%d' class='prev'><i class='icon icon-chevron-left'></i></a>
				<a href='#page' class='close'><i class='icon icon-th'></i></a>
				<a href='#image-%d' class='next'><i class='icon icon-chevron-right'></i></a>
			</div>
		</div>
	</li>
'''

HTML_CONTENT = ''' 
<div id='content'>
	<h1><i class='icon icon-th icon-5x'></i>%s</h1>
	<p><a class='links' href='%s'>%s</a></p>
</div>
'''

# http://www.endlesslycurious.com/2011/05/11/extracting-image-exif-data-with-python/
def get_exif_data(image):
    ret = {}
    try:
        if hasattr(image, '_getexif' ):
            exifinfo = image._getexif()
            if exifinfo is not None:
                for tag, value in exifinfo.items():
                    decoded = exif.TAGS.get(tag, tag)
                    ret[decoded] = value
    except IOError:
        print 'IOERROR ' + image
    return ret

# based on my own little python script, currently sitting at
# https://github.com/caio1982/Scripts/blob/master/exposure_time_check.py
def blur_factor(image):
    exifdata = get_exif_data(image)
    if exifdata:
        fl = exifdata['FocalLength']
        et = exifdata['ExposureTime']
        return ( et[0] / et[1] ) / ( 1 / ( fl[0] / fl[1] ) )
    else:
        return 0

def dirs_under(path):
    # until the glob module supports '**' (under discussion on issue #13968)
    # i won't bother much with REAL subdirs, just the ones one level beneath parent
    return [dir for dir in glob(path + '*') if os.path.isdir(dir)]

def gallery_generator(path):
    print 'Generating gallery inside [%s]' % path

    outpath = path + '.panfolio'
    if not os.path.exists(outpath):
        os.makedirs(outpath)
    else:
        print 'Thumbnails directory [%s] not empty, overwriting content' % outpath

    if args.name is None:
        print 'Empty gallery name, assigning default [%s]' % HTML_NAME
        html_name = HTML_NAME
    else:
        html_name = args.name

    if args.url is None:
        print 'Empty gallery URL address, assigning default [%s]' % HTML_URL
        html_url = HTML_URL
    else:
        html_url = args.url
   
    html = []
    html.append(HTML_HEADER % html_name)
    html.append('<body>')
    html.append('<section id=\'gallery\'>')
    html.append('<ul id=\'thumbnails\'>')

    currentimage = 1
    previousimage = currentimage - 1
    nextimage = currentimage + 1

    # might also potentially includes
    # sub-dirs, which we'll handle later
    allimages = glob(path + '*')

    for filepath in allimages:
        type = guess_type(filepath)[0]
        if type is None or 'image' not in type:
            print 'Skipping non-image item [%s]' % filepath
            allimages.remove(filepath)

    for filepath in allimages:
        filename = os.path.split(filepath)[1]
        thumbnail = '.panfolio/thumbnail_%s.png' % os.path.splitext(filename)[0]
        preview = '.panfolio/preview_%s.png' % os.path.splitext(filename)[0]
        try:
            i = image.open(filepath)
            try:
                exifdata = get_exif_data(i)
                if exifdata['Orientation'] == 3:
                    i = i.transpose(image.ROTATE_180)
                elif exifdata['Orientation'] == 6:
                    i = i.transpose(image.ROTATE_270)
                elif exifdata['Orientation'] == 8:
                    i = i.transpose(image.ROTATE_90)
            except KeyError:
                print 'No EXIF orientation found in [%s]' % filepath

            # this is not pretty but as long no major browsers support
            # image-orientation through css i don't know how to fix that
            # without using javascript, and i'd rather have the gallery
            # looking good than saving a few kilobytes of extra images
            i.thumbnail((512, 512), image.ANTIALIAS)
            i.save(path + preview, 'PNG', quality=100)

            i.thumbnail((256, 256), image.ANTIALIAS)
            if args.blurry:
                n = blur_factor(i)
                if float(n) > float(args.blurry):
                    # two passes, two diagonal crossed lines
                    # the ideal was always just to ease finding blurred images
                    # in a really big gallery by making them look slightly different
                    print 'Image [%s] seems blurry, factor [%s]' % (filepath, n)
                    marked = draw.Draw(i)
                    marked.line((0, 0) + i.size, fill='#FFFFFF')
                    marked.line((0, i.size[1], i.size[0], 0), fill='#FFFFFF')
            i.save(path + thumbnail, 'PNG', quality=100)
        except IOError:
            print 'Thumbnailing failed for [%s]' % filepath

        if args.captions:
            caption = '<div class=\'captioned\'><em>%s</em></div>' % filename
        else:
            caption = ''

        item = HTML_ITEM % (currentimage,
                            thumbnail,
                            currentimage,
                            caption,
                            filename,
                            preview,
                            previousimage,
                            nextimage)
        html.append(item)
        currentimage += 1
        nextimage = currentimage + 1
        previousimage = currentimage - 1

    html.append('</ul>')
    html.append('</section>')

    if not args.fullscreen:
        html.append(HTML_CONTENT % (html_name, html_url, html_url))
    else:
        print 'Fullscreen option has precedence over other gallery options'

    html.append('</body>')
    html.append('</html>')

    for item in RESOURCES:
        copy('resources/' + item, outpath)

    with open (path + 'index.html', 'w') as f:
        f.write('\n'.join(html))

    # just a log separator
    print ''

parser = argparse.ArgumentParser()

# REMEMBER:
# only the extremely necessary options
# no cluttering, no bloating
parser.add_argument('-d', '--dir', help='your photos directory')
parser.add_argument('-n', '--name', help='the name of your gallery')
parser.add_argument('-u', '--url', help='url to be appended to your gallery')
parser.add_argument('-b', '--blurry', help='mark images whose blurry factor is above N', metavar='N')
parser.add_argument('-f', '--fullscreen', help='makes a full screen pictures-only gallery', action='store_true')
parser.add_argument('-c', '--captions', help='inserts captions tags in the gallery for later edition', action='store_true')

args = parser.parse_args()

if __name__ == '__main__':
    if not args.dir:
        parser.print_help()
        exit(2)

    args.subdirs = dirs_under(args.dir + '/')

    if len(args.subdirs) > 1:
        print 'Found [%d] sub-galleries under [%s], processing all\n' % (len(args.subdirs), args.dir)
        for subdir in args.subdirs:
            gallery_generator(subdir + '/')

    gallery_generator(args.dir + '/')

    print 'All done! You can now copy [%s] and its gallery files as you wish' % args.dir
    exit(0)
